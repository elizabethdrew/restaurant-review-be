openapi: 3.0.3
info:
  description: An API for managing restaurant reviews
  title: Restaurant Review API
  version: 1.0.0
servers:
- url: /
paths:
  /restaurants:
    get:
      description: Returns a list of all restaurants.
      operationId: getAllRestaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Restaurant'
                type: array
          description: A list of restaurants.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Get all restaurants
      tags:
      - Restaurants
      x-accepts: application/json
    post:
      description: Adds a new restaurant to the database.
      operationId: addNewRestaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
        description: The restaurant to add.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'
          description: The new restaurant
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Add a new restaurant
      tags:
      - Restaurants
      - Add New
      x-content-type: application/json
      x-accepts: application/json
components:
  parameters:
    idParam:
      description: The ID of the resource to retrieve or update.
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    nameParam:
      description: The name of the resource to search for.
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    cityParam:
      description: The city of the resource to search for.
      explode: true
      in: query
      name: city
      required: false
      schema:
        type: string
      style: form
    ratingParam:
      description: The rating of the resource to search for.
      explode: true
      in: query
      name: rating
      required: false
      schema:
        maximum: 5
        minimum: 1
        type: integer
      style: form
  schemas:
    Restaurant:
      example:
        city: city
        name: name
        rating: 3
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: The unique identifier of the restaurant.
          format: int64
          type: integer
        name:
          description: The name of the restaurant.
          type: string
        city:
          description: The city where the restaurant is located.
          type: string
        rating:
          description: The rating of the restaurant.
          maximum: 5
          minimum: 1
          type: integer
        created_at:
          description: The date and time the restaurant was created.
          format: date-time
          type: string
      required:
      - city
      - name
      - rating
      type: object
    RestaurantInput:
      example:
        city: city
        name: name
        rating: 1
      properties:
        name:
          description: The name of the restaurant.
          type: string
        city:
          description: The city where the restaurant is located.
          type: string
        rating:
          description: The rating of the restaurant.
          maximum: 5
          minimum: 1
          type: integer
      required:
      - city
      - name
      - rating
      type: object
    Error:
      example:
        code: 0
        message: message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      type: object
    RestaurantResponse:
      example:
        success: true
        restaurant:
          city: city
          name: name
          rating: 3
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 0
        error:
          code: 0
          message: message
      properties:
        success:
          type: boolean
        restaurant:
          $ref: '#/components/schemas/Restaurant'
        error:
          $ref: '#/components/schemas/Error'
      type: object

