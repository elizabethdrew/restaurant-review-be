/*
 * Restaurant Review API
 * An API for managing restaurant reviews
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Restaurant;
import org.openapitools.client.model.RestaurantInput;
import org.openapitools.client.model.RestaurantResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RestaurantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RestaurantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestaurantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewRestaurant
     * @param restaurantInput The restaurant to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewRestaurantCall(RestaurantInput restaurantInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restaurantInput;

        // create path and map variables
        String localVarPath = "/restaurants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewRestaurantValidateBeforeCall(RestaurantInput restaurantInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restaurantInput' is set
        if (restaurantInput == null) {
            throw new ApiException("Missing the required parameter 'restaurantInput' when calling addNewRestaurant(Async)");
        }

        return addNewRestaurantCall(restaurantInput, _callback);

    }

    /**
     * Add a new restaurant
     * Adds a new restaurant to the database.
     * @param restaurantInput The restaurant to add. (required)
     * @return RestaurantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RestaurantResponse addNewRestaurant(RestaurantInput restaurantInput) throws ApiException {
        ApiResponse<RestaurantResponse> localVarResp = addNewRestaurantWithHttpInfo(restaurantInput);
        return localVarResp.getData();
    }

    /**
     * Add a new restaurant
     * Adds a new restaurant to the database.
     * @param restaurantInput The restaurant to add. (required)
     * @return ApiResponse&lt;RestaurantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestaurantResponse> addNewRestaurantWithHttpInfo(RestaurantInput restaurantInput) throws ApiException {
        okhttp3.Call localVarCall = addNewRestaurantValidateBeforeCall(restaurantInput, null);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new restaurant (asynchronously)
     * Adds a new restaurant to the database.
     * @param restaurantInput The restaurant to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewRestaurantAsync(RestaurantInput restaurantInput, final ApiCallback<RestaurantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewRestaurantValidateBeforeCall(restaurantInput, _callback);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRestaurantById
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Restaurant deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRestaurantByIdCall(Integer restaurantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restaurants/{restaurantId}"
            .replace("{" + "restaurantId" + "}", localVarApiClient.escapeString(restaurantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRestaurantByIdValidateBeforeCall(Integer restaurantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restaurantId' is set
        if (restaurantId == null) {
            throw new ApiException("Missing the required parameter 'restaurantId' when calling deleteRestaurantById(Async)");
        }

        return deleteRestaurantByIdCall(restaurantId, _callback);

    }

    /**
     * Delete a restaurant by ID
     * 
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Restaurant deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRestaurantById(Integer restaurantId) throws ApiException {
        deleteRestaurantByIdWithHttpInfo(restaurantId);
    }

    /**
     * Delete a restaurant by ID
     * 
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Restaurant deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRestaurantByIdWithHttpInfo(Integer restaurantId) throws ApiException {
        okhttp3.Call localVarCall = deleteRestaurantByIdValidateBeforeCall(restaurantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a restaurant by ID (asynchronously)
     * 
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Restaurant deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRestaurantByIdAsync(Integer restaurantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRestaurantByIdValidateBeforeCall(restaurantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllRestaurants
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRestaurantsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restaurants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRestaurantsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllRestaurantsCall(_callback);

    }

    /**
     * Get all restaurants
     * Returns a list of all restaurants.
     * @return List&lt;Restaurant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<Restaurant> getAllRestaurants() throws ApiException {
        ApiResponse<List<Restaurant>> localVarResp = getAllRestaurantsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all restaurants
     * Returns a list of all restaurants.
     * @return ApiResponse&lt;List&lt;Restaurant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Restaurant>> getAllRestaurantsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllRestaurantsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Restaurant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all restaurants (asynchronously)
     * Returns a list of all restaurants.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllRestaurantsAsync(final ApiCallback<List<Restaurant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRestaurantsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Restaurant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRestaurantById
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The restaurant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRestaurantByIdCall(Integer restaurantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restaurants/{restaurantId}"
            .replace("{" + "restaurantId" + "}", localVarApiClient.escapeString(restaurantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRestaurantByIdValidateBeforeCall(Integer restaurantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restaurantId' is set
        if (restaurantId == null) {
            throw new ApiException("Missing the required parameter 'restaurantId' when calling getRestaurantById(Async)");
        }

        return getRestaurantByIdCall(restaurantId, _callback);

    }

    /**
     * Get a restaurant by ID
     * Returns a single restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @return RestaurantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The restaurant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RestaurantResponse getRestaurantById(Integer restaurantId) throws ApiException {
        ApiResponse<RestaurantResponse> localVarResp = getRestaurantByIdWithHttpInfo(restaurantId);
        return localVarResp.getData();
    }

    /**
     * Get a restaurant by ID
     * Returns a single restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @return ApiResponse&lt;RestaurantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The restaurant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestaurantResponse> getRestaurantByIdWithHttpInfo(Integer restaurantId) throws ApiException {
        okhttp3.Call localVarCall = getRestaurantByIdValidateBeforeCall(restaurantId, null);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a restaurant by ID (asynchronously)
     * Returns a single restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The restaurant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRestaurantByIdAsync(Integer restaurantId, final ApiCallback<RestaurantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRestaurantByIdValidateBeforeCall(restaurantId, _callback);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRestaurantsByRatingOrCity
     * @param rating The minimum rating of the restaurants to search for. (optional)
     * @param city The city of the restaurants to search for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants matching the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRestaurantsByRatingOrCityCall(Integer rating, String city, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/restaurants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRestaurantsByRatingOrCityValidateBeforeCall(Integer rating, String city, final ApiCallback _callback) throws ApiException {
        return searchRestaurantsByRatingOrCityCall(rating, city, _callback);

    }

    /**
     * Search restaurants by review rating or city
     * Returns a list of restaurants matching the specified search criteria.
     * @param rating The minimum rating of the restaurants to search for. (optional)
     * @param city The city of the restaurants to search for. (optional)
     * @return List&lt;Restaurant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants matching the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public List<Restaurant> searchRestaurantsByRatingOrCity(Integer rating, String city) throws ApiException {
        ApiResponse<List<Restaurant>> localVarResp = searchRestaurantsByRatingOrCityWithHttpInfo(rating, city);
        return localVarResp.getData();
    }

    /**
     * Search restaurants by review rating or city
     * Returns a list of restaurants matching the specified search criteria.
     * @param rating The minimum rating of the restaurants to search for. (optional)
     * @param city The city of the restaurants to search for. (optional)
     * @return ApiResponse&lt;List&lt;Restaurant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants matching the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Restaurant>> searchRestaurantsByRatingOrCityWithHttpInfo(Integer rating, String city) throws ApiException {
        okhttp3.Call localVarCall = searchRestaurantsByRatingOrCityValidateBeforeCall(rating, city, null);
        Type localVarReturnType = new TypeToken<List<Restaurant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search restaurants by review rating or city (asynchronously)
     * Returns a list of restaurants matching the specified search criteria.
     * @param rating The minimum rating of the restaurants to search for. (optional)
     * @param city The city of the restaurants to search for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of restaurants matching the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRestaurantsByRatingOrCityAsync(Integer rating, String city, final ApiCallback<List<Restaurant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRestaurantsByRatingOrCityValidateBeforeCall(rating, city, _callback);
        Type localVarReturnType = new TypeToken<List<Restaurant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRestaurantById
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param restaurantInput The updated restaurant. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRestaurantByIdCall(Integer restaurantId, RestaurantInput restaurantInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restaurantInput;

        // create path and map variables
        String localVarPath = "/restaurants/{restaurantId}"
            .replace("{" + "restaurantId" + "}", localVarApiClient.escapeString(restaurantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRestaurantByIdValidateBeforeCall(Integer restaurantId, RestaurantInput restaurantInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restaurantId' is set
        if (restaurantId == null) {
            throw new ApiException("Missing the required parameter 'restaurantId' when calling updateRestaurantById(Async)");
        }

        // verify the required parameter 'restaurantInput' is set
        if (restaurantInput == null) {
            throw new ApiException("Missing the required parameter 'restaurantInput' when calling updateRestaurantById(Async)");
        }

        return updateRestaurantByIdCall(restaurantId, restaurantInput, _callback);

    }

    /**
     * Update a restaurant
     * Updates a restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param restaurantInput The updated restaurant. (required)
     * @return RestaurantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RestaurantResponse updateRestaurantById(Integer restaurantId, RestaurantInput restaurantInput) throws ApiException {
        ApiResponse<RestaurantResponse> localVarResp = updateRestaurantByIdWithHttpInfo(restaurantId, restaurantInput);
        return localVarResp.getData();
    }

    /**
     * Update a restaurant
     * Updates a restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param restaurantInput The updated restaurant. (required)
     * @return ApiResponse&lt;RestaurantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestaurantResponse> updateRestaurantByIdWithHttpInfo(Integer restaurantId, RestaurantInput restaurantInput) throws ApiException {
        okhttp3.Call localVarCall = updateRestaurantByIdValidateBeforeCall(restaurantId, restaurantInput, null);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a restaurant (asynchronously)
     * Updates a restaurant by ID.
     * @param restaurantId The ID of the restaurant to retrieve. (required)
     * @param restaurantInput The updated restaurant. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated restaurant </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Restaurant not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRestaurantByIdAsync(Integer restaurantId, RestaurantInput restaurantInput, final ApiCallback<RestaurantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRestaurantByIdValidateBeforeCall(restaurantId, restaurantInput, _callback);
        Type localVarReturnType = new TypeToken<RestaurantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
