/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Review;
import org.openapitools.model.ReviewInput;
import org.openapitools.model.ReviewResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-11T15:16:39.328790+01:00[Europe/London]")
@Validated
@Tag(name = "Reviews", description = "the Reviews API")
public interface ReviewsApi {

    /**
     * POST /api/v1/reviews : Add a new review
     * Adds a new review to the database.
     *
     * @param reviewInput The review to add. (required)
     * @return The new review (status code 201)
     *         or Invalid input (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "addNewReview",
        summary = "Add a new review",
        description = "Adds a new review to the database.",
        tags = { "Reviews" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The new review", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/reviews",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ReviewResponse> addNewReview(
        @Parameter(name = "ReviewInput", description = "The review to add.", required = true) @Valid @RequestBody ReviewInput reviewInput
    );


    /**
     * DELETE /api/v1/reviews/{reviewId} : Delete a review
     * Deletes a review by ID.
     *
     * @param reviewId The ID of the review to delete. (required)
     * @return Successfully deleted. (status code 204)
     *         or Review not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteReviewById",
        summary = "Delete a review",
        description = "Deletes a review by ID.",
        tags = { "Reviews" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted."),
            @ApiResponse(responseCode = "404", description = "Review not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/reviews/{reviewId}",
        produces = { "application/json" }
    )
    ResponseEntity<Void> deleteReviewById(
        @Min(1) @Parameter(name = "reviewId", description = "The ID of the review to delete.", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Integer reviewId
    );


    /**
     * GET /api/v1/reviews : Get all reviews
     * Returns a list of all reviews.
     *
     * @param restaurantId The restaurant ID to filter reviews by. (optional)
     * @param userId The user ID to filter reviews by. (optional)
     * @return A list of reviews. (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getAllReviews",
        summary = "Get all reviews",
        description = "Returns a list of all reviews.",
        tags = { "Reviews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of reviews.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/reviews",
        produces = { "application/json" }
    )
    ResponseEntity<List<Review>> getAllReviews(
        @Parameter(name = "restaurant_id", description = "The restaurant ID to filter reviews by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "restaurant_id", required = false) Long restaurantId,
        @Parameter(name = "user_id", description = "The user ID to filter reviews by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user_id", required = false) Long userId
    );


    /**
     * GET /api/v1/reviews/{reviewId} : Get a review by ID
     * Returns a single review by ID.
     *
     * @param reviewId The ID of the review to retrieve. (required)
     * @return The review. (status code 200)
     *         or Review not found. (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getReviewById",
        summary = "Get a review by ID",
        description = "Returns a single review by ID.",
        tags = { "Reviews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The review.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Review.class))
            }),
            @ApiResponse(responseCode = "404", description = "Review not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/reviews/{reviewId}",
        produces = { "application/json" }
    )
    ResponseEntity<Review> getReviewById(
        @Min(1) @Parameter(name = "reviewId", description = "The ID of the review to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Integer reviewId
    );


    /**
     * PUT /api/v1/reviews/{reviewId} : Update a review
     * Updates a review by ID.
     *
     * @param reviewId The ID of the review to update. (required)
     * @param reviewInput The updated review data. (required)
     * @return The updated review. (status code 200)
     *         or Invalid input. (status code 400)
     *         or Review not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateReviewById",
        summary = "Update a review",
        description = "Updates a review by ID.",
        tags = { "Reviews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated review.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Review not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/reviews/{reviewId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ReviewResponse> updateReviewById(
        @Min(1) @Parameter(name = "reviewId", description = "The ID of the review to update.", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Integer reviewId,
        @Parameter(name = "ReviewInput", description = "The updated review data.", required = true) @Valid @RequestBody ReviewInput reviewInput
    );

}
