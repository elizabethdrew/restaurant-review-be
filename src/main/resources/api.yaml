openapi: 3.0.3
servers:
  - url: http://localhost:8080
info:
  title: Restaurant Review REST API
  version: 1.0.0
  description: Spring Boot Restaurant Review REST API Documentation
  contact:
    name: Elizabeth Drew
paths:
  /api/v1/search:
    get:
      summary: Search all restaurants
      operationId: getSearch
      tags:
        - Search
      description: Returns a list of restaurant results.
      x-spring-paginated: true
      parameters:
        - in: query
          name: query
          required: true
          description: Search query to filter restaurants.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '404':
          description: No Results Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/restaurants:
    get:
      security: []
      summary: Get all restaurants
      operationId: getAllRestaurants
      tags:
        - Restaurants
      description: Retrieves a list of all restaurants. Note If the favouritesOnly parameter is set to true, the JWT token must be provided for authentication. Otherwise, the endpoint can be accessed without authentication.
      x-spring-paginated: true
      parameters:
        - name: city
          in: query
          description: The city to filter restaurants by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: rating
          in: query
          description: The rating value to filter restaurants by.
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
              maximum: 5
        - name: user_id
          in: query
          description: The user ID to filter restaurants by.
          required: false
          schema:
            type: integer
            format: int64
        - name: price_range
          in: query
          description: Filter by price range
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
              maximum: 3
        - name: cuisine
          in: query
          description: Filter by cuisine
          required: false
          schema:
            type: array
            items:
              type: string
        - name: favouritesOnly
          in: query
          description: If set to true, returns only favourite restaurants. Requires authentication to be provided.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '404':
          description: No Results Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add a new restaurant
      operationId: addNewRestaurant
      tags:
        - Restaurants
      description: Adds a new restaurant to the database.
      security:
        - basicAuth: []
      requestBody:
        description: The restaurant to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/restaurants/{restaurantId}:
    get:
      security: []
      summary: Get a restaurant by ID
      operationId: getRestaurantById
      description: Returns a single restaurant by ID. Note to see if the the user has favourited the restaurant, the JWT token must be provided for authentication. Otherwise, the endpoint can be accessed without authentication.
      tags:
        - Restaurants
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a restaurant
      operationId: updateRestaurantById
      description: Updates a restaurant by ID.
      security:
        - basicAuth: []
      tags:
        - Restaurants
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant to update.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The updated restaurant.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a restaurant
      operationId: deleteRestaurantById
      tags:
        - Restaurants
      description: Deletes a restaurant by ID.
      security:
        - basicAuth: []
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant to delete.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: Successfully Deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/restaurants/{restaurantId}/favourite:
    post:
      summary: Add or remove a restaurant from the user's favourites.
      description: Mark or unmark a restaurant as a favourite for the authenticated user.
      operationId: toggleFavourite
      tags:
        - Favourites
      security:
        - basicAuth: [ ]
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: ID of the restaurant to be marked or unmarked as favourite.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Restaurant added to favourites successfully.
        '204':
          description: Restaurant removed from favourites successfully.
        '400':
          description: Invalid input or request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: User is not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Restaurant not found.

  /api/v1/restaurants/{restaurantId}/claim:
    get:
      security:
        - basicAuth: []
      summary: Get a restaurant claim status for current user
      operationId: getRestaurantClaimStatus
      description: Returns the status of a claim for restaurant by current user
      tags:
        - Restaurants
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      security:
        - basicAuth: [ ]
      summary: Submit a restaurant claim status for current user
      operationId: createRestaurantClaim
      description: Create a claim for restaurant by current user
      tags:
        - Restaurants
      parameters:
        - name: restaurantId
          in: path
          description: The ID of the restaurant to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The restaurant to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimInput'
      responses:
        '201':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimStatus'
        '401':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users:
    post:
      summary: Add a new user
      tags:
        - User
      description: Adds a new user to the database.
      operationId: addUser
      security:
        - basicAuth: []
      requestBody:
        description: The user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/login:
    post:
      summary: Authenticate a user and generate a JWT token
      description: Authenticate a user with provided credentials and return a JWT token for further authenticated requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userId:
                    type: integer
                    format: int64
                  expirationTime:
                    type: string
                    format: date-time
        '400':
          description: Invalid Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - User
      description: Returns a single user by ID
      operationId: getUserById
      security:
        - basicAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID or name of the user to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a user
      tags:
        - User
      description: Updates a user by ID.
      operationId: updateUserById
      security:
        - basicAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID or name of the user to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The updated user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a user by ID
      tags:
        - User
      operationId: deleteUserById
      security:
        - basicAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID or name of the user to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: Deleted
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/reviews:
    get:
      security: []
      summary: Get all reviews
      operationId: getAllReviews
      tags:
        - Reviews
      description: Returns a list of all reviews.
      x-spring-paginated: true
      parameters:
        - name: restaurant_id
          in: query
          description: The restaurant ID to filter reviews by.
          required: false
          schema:
            type: integer
            format: int64
        - name: user_id
          in: query
          description: The user ID to filter reviews by.
          required: false
          schema:
            type: integer
            format: int64
        - name: rating
          in: query
          description: The rating value to filter restaurants by.
          required: false
          schema:
            type: array
            items:
              type: integer
              minimum: 1
              maximum: 5
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: No Results Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add a new review
      operationId: addNewReview
      tags:
        - Reviews
      description: Adds a new review to the database. User cannot review a restaurant more than once within a year. Owner of restaurant cannot review their own restaurant.
      security:
        - basicAuth: [ ]
      requestBody:
        description: The review to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/reviews/{reviewId}:
    get:
      security: []
      summary: Get a review by ID
      operationId: getReviewById
      tags:
        - Reviews
      description: Returns a single review by ID.
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to retrieve.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a review
      operationId: updateReviewById
      tags:
        - Reviews
      description: Updates a review by ID.
      security:
        - basicAuth: [ ]
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to update.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The updated review data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a review
      operationId: deleteReviewById
      description: Deletes a review by ID.
      security:
        - basicAuth: [ ]
      tags:
        - Reviews
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to delete.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: Deleted
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/cuisines:
    get:
      summary: Get all cuisines
      operationId: getCuisines
      description: Lists all the available cuisines
      security: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new cuisine
      operationId: addNewCuisine
      description: Add a new cuisine if it doesn't already exist
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cuisine'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already Exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/cuisines/{name}:
    delete:
      summary: Delete a cuisine by name
      operationId: deleteCuisine
      description: Delete an unused cuisine
      security:
        - basicAuth: [ ]
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the cuisine to delete
          schema:
            type: string
      responses:
        '204':
          description: Successfully Deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient Permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Referenced By Restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/claims/pending:
    get:
      summary: Get all pending claims for restaurant ownership
      operationId: getPendingClaims
      tags:
        - Admin
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: List of all pending claims
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClaimStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/claims/{claimId}/accept:
    post:
      summary: Admin accepts a claim
      description: Admin accepts a claim for restaurant ownership
      operationId: acceptClaim
      tags:
        - Admin
      security:
        - basicAuth: [ ]
      parameters:
        - name: claimId
          in: path
          description: ID of the claim to be accepted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Claim accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/claims/{claimId}/reject:
    post:
      summary: Admin rejects a claim
      description: Admin rejects a claim for restaurant ownership
      operationId: rejectClaim
      tags:
        - Admin
      security:
        - basicAuth: [ ]
      parameters:
        - name: claimId
          in: path
          description: ID of the claim to be rejected
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Claim rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:

  securitySchemes:
    basicAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    idParam:
      name: id
      in: path
      description: The ID of the resource to retrieve or update.
      required: true
      schema:
        type: integer
        format: int64

    nameParam:
      name: name
      in: query
      description: The name of the resource to search for.
      required: false
      schema:
        type: string

    cityParam:
      name: city
      in: query
      description: The city of the resource to search for.
      required: false
      schema:
        type: string

    ratingParam:
      name: rating
      in: query
      description: The rating of the resource to search for.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 5

  schemas:

    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        restaurant_id:
          type: integer
          format: int64
        restaurant_name:
          type: string
        restaurant_city:
          type: string
        user_id:
          type: integer
          format: int64
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
          default: false

    ReviewInput:
      type: object
      properties:
        restaurant_id:
          type: integer
          format: int64
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
      required:
        - restaurant_id
        - rating
        - comment

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the user.
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          description: The email address of the user.
        username:
          type: string
          description: The username of the user.
        password:
          type: string
          description: The password of the user.
        role:
          type: string
          description: The role of the user (admin or reviewer)
          enum: ['ADMIN', 'REVIEWER']
        created_at:
          type: string
          format: date-time
          description: The date and time the user was created.
        is_deleted:
          type: boolean
          default: false

    UserInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          description: The email address of the user.
        username:
          type: string
          description: The username of the user.
        password:
          type: string
          description: The password of the user.
        role:
          type: string
          description: The role of the user (admin or reviewer)
          enum: [ 'ADMIN', 'REVIEWER' ]
          default: 'REVIEWER'
      required:
        - name
        - email
        - password
        - username
        - role

    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the restaurant.
        name:
          type: string
          description: The name of the restaurant.
        city:
          type: string
          description: The city where the restaurant is located.
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: The rating of the restaurant.
        price_range:
          type: integer
          minimum: 1
          maximum: 3
          description: The price range of the restaurant.
        latitude:
          type: number
          format: double
          description: The latitude coordinates of the restaurant.
        longitude:
          type: number
          format: double
          description: The longitude coordinates of the restaurant.
        cuisines:
          type: array
          items:
            type: string
            description: List of cuisine names the restaurant offers
        created_at:
          type: string
          format: date-time
          description: The date and time the restaurant was created.
        is_deleted:
          type: boolean
          default: false
        is_favourite:
          type: boolean
          default: false
        owner_id:
          type: integer
          format: int64

    RestaurantInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the restaurant.
        city:
          type: string
          description: The city where the restaurant is located.
        price_range:
          type: integer
          minimum: 1
          maximum: 3
          description: The price range of the restaurant.
        latitude:
          type: number
          format: double
          description: The latitude coordinates of the restaurant.
        longitude:
          type: number
          format: double
          description: The longitude coordinates of the restaurant.
        cuisines:
          type: array
          items:
            type: string
            description: List of cuisine names the restaurant offers
      required:
        - name
        - city

    Cuisine:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    ClaimStatus:
      type: object
      properties:
        status:
          type: string
          description: The claim status (e.g., pending, accepted, denied)
        claimant:
          type: integer
          format: int64
          description: ID of the user who has made the claim
        restaurant:
          type: integer
          format: int64
          description: ID of the restaurant the claim relates to
        claimId:
          type: integer
          format: int64
          description: ID of the claim
        reason:
          type: string
          description: Reason or explanation provided by the user for the claim

    ClaimInput:
      type: object
      properties:
        reason:
          type: string
          description: Reason or explanation provided by the user for the claim
